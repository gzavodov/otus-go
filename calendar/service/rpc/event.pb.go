// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app/proto/event.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventIdentifier struct {
	Value                int64    `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventIdentifier) Reset()         { *m = EventIdentifier{} }
func (m *EventIdentifier) String() string { return proto.CompactTextString(m) }
func (*EventIdentifier) ProtoMessage()    {}
func (*EventIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_935e3c3e3df46d27, []int{0}
}

func (m *EventIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventIdentifier.Unmarshal(m, b)
}
func (m *EventIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventIdentifier.Marshal(b, m, deterministic)
}
func (m *EventIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIdentifier.Merge(m, src)
}
func (m *EventIdentifier) XXX_Size() int {
	return xxx_messageInfo_EventIdentifier.Size(m)
}
func (m *EventIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_EventIdentifier proto.InternalMessageInfo

func (m *EventIdentifier) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type EventListQuery struct {
	UserID               int64                `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	From                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventListQuery) Reset()         { *m = EventListQuery{} }
func (m *EventListQuery) String() string { return proto.CompactTextString(m) }
func (*EventListQuery) ProtoMessage()    {}
func (*EventListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_935e3c3e3df46d27, []int{1}
}

func (m *EventListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventListQuery.Unmarshal(m, b)
}
func (m *EventListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventListQuery.Marshal(b, m, deterministic)
}
func (m *EventListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListQuery.Merge(m, src)
}
func (m *EventListQuery) XXX_Size() int {
	return xxx_messageInfo_EventListQuery.Size(m)
}
func (m *EventListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_EventListQuery proto.InternalMessageInfo

func (m *EventListQuery) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *EventListQuery) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *EventListQuery) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type EventListReply struct {
	Items                []*Event `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventListReply) Reset()         { *m = EventListReply{} }
func (m *EventListReply) String() string { return proto.CompactTextString(m) }
func (*EventListReply) ProtoMessage()    {}
func (*EventListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_935e3c3e3df46d27, []int{2}
}

func (m *EventListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventListReply.Unmarshal(m, b)
}
func (m *EventListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventListReply.Marshal(b, m, deterministic)
}
func (m *EventListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListReply.Merge(m, src)
}
func (m *EventListReply) XXX_Size() int {
	return xxx_messageInfo_EventListReply.Size(m)
}
func (m *EventListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventListReply proto.InternalMessageInfo

func (m *EventListReply) GetItems() []*Event {
	if m != nil {
		return m.Items
	}
	return nil
}

type Event struct {
	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Description          string               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Location             string               `protobuf:"bytes,4,opt,name=Location,proto3" json:"Location,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	NotifyBefore         int64                `protobuf:"varint,7,opt,name=NotifyBefore,proto3" json:"NotifyBefore,omitempty"`
	UserID               int64                `protobuf:"varint,8,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CalendarID           int64                `protobuf:"varint,9,opt,name=CalendarID,proto3" json:"CalendarID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_935e3c3e3df46d27, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Event) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Event) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Event) GetNotifyBefore() int64 {
	if m != nil {
		return m.NotifyBefore
	}
	return 0
}

func (m *Event) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Event) GetCalendarID() int64 {
	if m != nil {
		return m.CalendarID
	}
	return 0
}

func init() {
	proto.RegisterType((*EventIdentifier)(nil), "calendar.EventIdentifier")
	proto.RegisterType((*EventListQuery)(nil), "calendar.EventListQuery")
	proto.RegisterType((*EventListReply)(nil), "calendar.EventListReply")
	proto.RegisterType((*Event)(nil), "calendar.Event")
}

func init() { proto.RegisterFile("app/proto/event.proto", fileDescriptor_935e3c3e3df46d27) }

var fileDescriptor_935e3c3e3df46d27 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xc7, 0x91, 0x6c, 0x29, 0xf6, 0x38, 0x24, 0x30, 0xa4, 0x45, 0xd5, 0xa1, 0x35, 0x82, 0x52,
	0xe3, 0x83, 0x0c, 0x6e, 0xa1, 0x3d, 0xe5, 0x90, 0x28, 0x05, 0x95, 0x50, 0xa8, 0xe2, 0xf4, 0xd0,
	0xdb, 0x46, 0x1a, 0x87, 0x05, 0x59, 0xbb, 0xac, 0xd6, 0x01, 0xdf, 0xfb, 0x4e, 0x7d, 0xa3, 0x3e,
	0x47, 0xd1, 0xae, 0xed, 0xd8, 0xea, 0x87, 0x4b, 0x6e, 0x9a, 0xf9, 0xff, 0x66, 0xf5, 0x9f, 0x0f,
	0x78, 0xc6, 0xa4, 0x9c, 0x48, 0x25, 0xb4, 0x98, 0xd0, 0x03, 0x55, 0x3a, 0x36, 0xdf, 0xd8, 0xcb,
	0x59, 0x49, 0x55, 0xc1, 0x54, 0xf8, 0xea, 0x5e, 0x88, 0xfb, 0x92, 0x2c, 0x73, 0xb7, 0x9c, 0x4f,
	0x34, 0x5f, 0x50, 0xad, 0xd9, 0x42, 0x5a, 0x34, 0x7a, 0x03, 0xa7, 0x57, 0x4d, 0x65, 0x5a, 0x50,
	0xa5, 0xf9, 0x9c, 0x93, 0xc2, 0x33, 0xf0, 0xbe, 0xb2, 0x72, 0x49, 0x81, 0x33, 0x74, 0x46, 0x9d,
	0xcc, 0x06, 0xd1, 0x77, 0x07, 0x4e, 0x0c, 0x79, 0xcd, 0x6b, 0xfd, 0x65, 0x49, 0x6a, 0x85, 0xcf,
	0xc1, 0xbf, 0xad, 0x49, 0xa5, 0xc9, 0x9a, 0x5c, 0x47, 0x18, 0x43, 0xf7, 0xa3, 0x12, 0x8b, 0xc0,
	0x1d, 0x3a, 0xa3, 0xc1, 0x34, 0x8c, 0xad, 0x87, 0x78, 0xe3, 0x21, 0x9e, 0x6d, 0x3c, 0x64, 0x86,
	0xc3, 0x31, 0xb8, 0x33, 0x11, 0x74, 0x0e, 0xd2, 0xee, 0x4c, 0x44, 0xef, 0x77, 0x5c, 0x64, 0x24,
	0xcb, 0x15, 0xbe, 0x06, 0x2f, 0xd5, 0xb4, 0xa8, 0x03, 0x67, 0xd8, 0x19, 0x0d, 0xa6, 0xa7, 0xf1,
	0xa6, 0xf9, 0xd8, 0x80, 0x99, 0x55, 0xa3, 0x1f, 0x2e, 0x78, 0x26, 0x81, 0x27, 0xe0, 0x6e, 0x2d,
	0xbb, 0x69, 0xd2, 0xf4, 0x3b, 0xe3, 0xba, 0x24, 0xe3, 0xb7, 0x9f, 0xd9, 0x00, 0x87, 0x30, 0x48,
	0xa8, 0xce, 0x15, 0x97, 0x9a, 0x8b, 0xca, 0xb8, 0xeb, 0x67, 0xbb, 0x29, 0x0c, 0xa1, 0x77, 0x2d,
	0x72, 0x66, 0xe4, 0xae, 0x91, 0xb7, 0x31, 0x7e, 0x80, 0xfe, 0x8d, 0x66, 0x4a, 0x37, 0xe6, 0x03,
	0xef, 0x60, 0x67, 0x8f, 0x30, 0xbe, 0x83, 0xa3, 0xab, 0xaa, 0x30, 0x75, 0xfe, 0xc1, 0xba, 0x0d,
	0x8a, 0x11, 0x1c, 0x7f, 0x16, 0x9a, 0xcf, 0x57, 0x17, 0x34, 0x17, 0x8a, 0x82, 0x23, 0xd3, 0xdd,
	0x5e, 0x6e, 0x67, 0x5d, 0xbd, 0xbd, 0x75, 0xbd, 0x04, 0xb8, 0x5c, 0x8f, 0x2c, 0x4d, 0x82, 0xbe,
	0xd1, 0x76, 0x32, 0xd3, 0x9f, 0x2e, 0x1c, 0x9b, 0xc9, 0xdd, 0x90, 0x7a, 0xe0, 0x39, 0xe1, 0x18,
	0xfc, 0x4b, 0x45, 0x4c, 0x13, 0xb6, 0x87, 0x1d, 0xb6, 0x13, 0x38, 0x85, 0x6e, 0x46, 0xac, 0xc0,
	0x17, 0x2d, 0xe1, 0xf1, 0xde, 0x7e, 0xaf, 0x19, 0x83, 0x7f, 0x2b, 0x8b, 0xff, 0x7b, 0xff, 0x1c,
	0xfc, 0x84, 0x4a, 0xd2, 0xf4, 0xaf, 0x3f, 0xfc, 0x5d, 0xc2, 0x73, 0xe8, 0x35, 0xfe, 0x9a, 0x73,
	0xc2, 0xa0, 0x85, 0x6d, 0x2f, 0x3d, 0xfc, 0x93, 0x62, 0xaf, 0xef, 0x13, 0x9c, 0x35, 0xf5, 0x66,
	0xd0, 0xdc, 0x2e, 0xff, 0xa9, 0x6f, 0x5d, 0x78, 0xdf, 0x3a, 0x4a, 0xe6, 0x77, 0xbe, 0x59, 0xf4,
	0xdb, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xd8, 0x5d, 0x2c, 0xdd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	Read(ctx context.Context, in *EventIdentifier, opts ...grpc.CallOption) (*Event, error)
	Update(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	Delete(ctx context.Context, in *EventIdentifier, opts ...grpc.CallOption) (*EventIdentifier, error)
	ReadList(ctx context.Context, in *EventListQuery, opts ...grpc.CallOption) (*EventListReply, error)
	ReadNotificationList(ctx context.Context, in *EventListQuery, opts ...grpc.CallOption) (*EventListReply, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/calendar.EventService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Read(ctx context.Context, in *EventIdentifier, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/calendar.EventService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Update(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/calendar.EventService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Delete(ctx context.Context, in *EventIdentifier, opts ...grpc.CallOption) (*EventIdentifier, error) {
	out := new(EventIdentifier)
	err := c.cc.Invoke(ctx, "/calendar.EventService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadList(ctx context.Context, in *EventListQuery, opts ...grpc.CallOption) (*EventListReply, error) {
	out := new(EventListReply)
	err := c.cc.Invoke(ctx, "/calendar.EventService/ReadList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ReadNotificationList(ctx context.Context, in *EventListQuery, opts ...grpc.CallOption) (*EventListReply, error) {
	out := new(EventListReply)
	err := c.cc.Invoke(ctx, "/calendar.EventService/ReadNotificationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	Create(context.Context, *Event) (*Event, error)
	Read(context.Context, *EventIdentifier) (*Event, error)
	Update(context.Context, *Event) (*Event, error)
	Delete(context.Context, *EventIdentifier) (*EventIdentifier, error)
	ReadList(context.Context, *EventListQuery) (*EventListReply, error)
	ReadNotificationList(context.Context, *EventListQuery) (*EventListReply, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) Create(ctx context.Context, req *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEventServiceServer) Read(ctx context.Context, req *EventIdentifier) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedEventServiceServer) Update(ctx context.Context, req *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedEventServiceServer) Delete(ctx context.Context, req *EventIdentifier) (*EventIdentifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedEventServiceServer) ReadList(ctx context.Context, req *EventListQuery) (*EventListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadList not implemented")
}
func (*UnimplementedEventServiceServer) ReadNotificationList(ctx context.Context, req *EventListQuery) (*EventListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotificationList not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.EventService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Create(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.EventService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Read(ctx, req.(*EventIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.EventService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Update(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.EventService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Delete(ctx, req.(*EventIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.EventService/ReadList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ReadList(ctx, req.(*EventListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ReadNotificationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ReadNotificationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.EventService/ReadNotificationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ReadNotificationList(ctx, req.(*EventListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EventService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _EventService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EventService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EventService_Delete_Handler,
		},
		{
			MethodName: "ReadList",
			Handler:    _EventService_ReadList_Handler,
		},
		{
			MethodName: "ReadNotificationList",
			Handler:    _EventService_ReadNotificationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/proto/event.proto",
}
